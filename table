//插入排序

#include <stdio.h>
#include <stdlib.h>
#define MAXSIZE 100
typedef int keytype;
typedef struct
{
	keytype key;
	int link;
	int other;
}recordtype;
typedef struct{
    recordtype r[MAXSIZE+1];
    int length;
}table;
//直接插入排序
void insertsort(table *tab)
{
    int i,j;
    for(i=2;i<=tab->length;i++)
    {
        j=i-1;
        tab->r[0]=tab->r[i];//设置哨兵
		while(tab->r[0].key<tab->r[j].key)
        {
            tab->r[j+1]=tab->r[j];
            j=j-1;
        }
        tab->r[j+1]=tab->r[0];
    }
	printf("\n直接插入排序后的数字：\n");
	for(i=2;i<=tab->length;i++)
	{
		printf("%d   ",tab->r[i].key);
	}
}
//二分法插入排序
void binarysort (table *tab)
{
	int i,j,left,right,mid;
	for(i=2;i<=tab->length;i++)
	{
		tab->r[0]=tab->r[i];
		left=1;right=i-1;
		while(left<=right)
		{
			mid=(left+right)/2;
			if(tab->r[i].key<tab->r[mid].key)
				right=mid-1;
			else
				left=mid+1;
		}
		for(j=i-1;j>=left;j--)
		{
			tab->r[j+1]=tab->r[j];
		}
		tab->r[left]=tab->r[0];
	}
	printf("\n二分法插入排序后的数字：\n");
	for(i=2;i<=tab->length;i++)
	{
		printf("%d   ",tab->r[i].key);
	}
}
//表插入排序
void tableinsertsort(table *tab)
{
	int i,p,q;
	tab->r[0].link=1;
	tab->r[1].link=0;
	for(i=2;i<tab->length;i++)
	{
		q=0;
		p=tab->r[0].link;
		while(p!=0&&tab->r[i].key>=tab->r[p].key)
		{
			q=p;
			p=tab->r[p].link;
		}
		tab->r[i].link=p;
		tab->r[q].link=i;
	}
	printf("\n表插入排序后的数字：\n");
	for(i=2;i<=tab->length;i++)
	{
		printf("%d   ",tab->r[i].key);
	}
}
//Shell排序
void shellinsertsort(table *tab)
{
	int i,d,j;
	d=tab->length/2;
	while(d>=1)
	{
		for(i=d+1;i<tab->length;i++)
		{
			tab->r[0]=tab->r[i];
			j=i-d;
			while(j>0&&tab->r[0].key<tab->r[j].key)
			{
				tab->r[j+d]=tab->r[j];
				j=j-d;
			}
			tab->r[j+d]=tab->r[0];
		}
		d=d/2;
	}
	printf("\nShell排序后的数字：\n");
	for(i=2;i<=tab->length;i++)
	{
		printf("%d   ",tab->r[i].key);
	}
}
int main()
{
    table x;
	int i;
	int p;
	int num;
	int t;
	printf("\n请输入要排序的数字个数：\n");
	scanf("%d",&t);
	x.length=t+1;
	printf("\n请输入要排序的数字：\n");
	for(i=1;i<=t;i++)
	{
		scanf("%d",&p);
		x.r[i].key=p;
	}
	insertsort(&x);
	binarysort(&x);
	tableinsertsort(&x);
	shellinsertsort(&x);
    system("pause");
    return 0;
}