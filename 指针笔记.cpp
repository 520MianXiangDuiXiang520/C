//指针：实质是一种数据类型，数据变量存储数据（int double）指针变量存储数据的地址
#include<stdio.h>
#include<stdlib.h>
void one(int *p_one);
int main()
{
	int a=10;
	//定义指针变量（数据类型 *变量名）
	int* p_a;
	//指针变量的赋值（指针变量名=&其他变量名）
	p_a=&a;
	//通过指针访问数据（*指针变量）
	printf("***********************通过指针访问数据（*指针变量）*******\n\n");
	printf("a=%d\n\n",*p_a);
	//使用scanf()给指针赋值(不与要&)
	printf("********************使用scanf()给指针赋值(不与要&)************\n\n");
	int b;
	int b1;
	int* p_b=&b1;                                                  //p_b是一个地址，需要赋值
	printf("输入b的值为   ");
	scanf_s("%d",&b);                                            //数据新变量要用&
	printf("输入p_b的值为   ");
	scanf_s("%d",p_b);
	printf("b=%d\n",b);
	printf("p_b=%d\n\n",*p_b);                               //*p_b访问数据
	//处理所指向的数据
	/*  “*”的优先级要高于算数运算符  “++，--”运算优先级高于“*” */
	printf("****************************处理数据*************\n\n");
	*p_b+=b;
	printf("p_b=p_b+b 运算后为 %d \n\n",*p_b);
	(*p_b)++;                                               //自增优先级高，必须加()
	printf("自增运算后p_b=%d\n\n",*p_b);
	//指向常量的指针 数据常量用const声明 用指针访问常量的地址前面也必须加const 
	printf("*****************************指向常量的指针****************\n\n");
	const int c=40;
	const int *p_c=&c;
	printf("指针访问常量c的地址c=%d\n",*p_c);
	//常量不可修改
	//(*p_c)++;    错误！
	//定义指针为常量 （数据类型 * conct 名称）
	int c1=15;
	printf("            c1=  %d\n\n",c1);
	int* const p_c1=&c1;
	printf("指针常量  p_c1=  %d\n\n",*p_c1);
	c1++;                                                 //c1并未改变属性
	printf("c1自增后    c1=  %d\n\n",c1);
	//指针常量可以修改所指向的数据，但不能修改地址
	(*p_c1)++;                                         //允许修改所指向的数据，不会报错
	printf("p_c1自增后p_c1=  %d\n\n",*p_c1);
	/*int c2=13;
	p_c1=&c2;*/  //试图修改p_c1的地址，报错：表达式必须为可修改的左值，error!
	//指向一维数组的指针
	//1.为指针赋数组数据的地址
	int d[5]={1,2,3,4,5};
	int i1,i2;
	puts("通过数组名和下标的方式输出数组\n");
	for(i1=0;i1<5;i1++)
		printf("%d  ",d[i1]);
	printf("\n");
	puts("通过指针输出数组\n");
	int *p_d;
	for(i2=0;i2<5;i2++)
	{
		p_d=&d[i2];
		printf("%d  ",*p_d);
	}
	printf("\n");
	//2.使用数组名为指针赋值
	//将数组名赋给指针相当于把数组中的一个元素的地址付给指针
	printf("**************************使用数组名为指针赋值***************\n");
	int *p_d2;
	p_d2=&d[0];//或者可以写为p_d2=d;
	printf("%d\n",*p_d2);
	//使用指针遍历数组元素（原理：数组中的数据在储存单元中连续分布）
	int i3;
	/* (当i3=0时，*p_d2输出数组中的第一个元素，i3=1时，*p_d2指向数组中第二个数据地址。。。。)*/
	printf("遍历输出数组结果：\n");
	for(i3=0;i3<5;i3++)
		printf("%d ",*(p_d2+i3));
	printf("\n");
	//printf("%d\n",*(p_d2+1));
	//指向同一数组的指针
	//使用指针完成数组的逆向输出
	int *p_dt=&d[0];
	int *p_dw=&d[4];
	int i4=0;
	int dz;
	while(*(p_dt+i4)<*(p_dw-i4))
	{
		dz=*(p_dt+i4);
		*(p_dt+i4)=*(p_dw-i4);
		*(p_dw-i4)=dz;
		i4++;
	}
	puts("倒叙后的数组\n");
	int i5;
	for(i5=0;i5<5;i5++)
		printf("%d \n",*(p_d2+i5));
	//指向二维数组的指针(不能把二维数组名直接赋给指针)
	puts("指针与二维数组\n");
	int e[2][3]={{1,2,3},{4,5,6}};
	int i7,i6;
	for(i7=0;i7<2;i7++)
	{
		for(i6=0;i6<3;i6++)
			printf("%3d",e[i7][i6]);
		printf("\n");
	}
	int *p_e=&e[0][0];      //不能写成*p_e=e;
	printf("%d\n",*p_e);
	//使用指针读取二维数组中的任意数据
	/*   读取二维数组num[m][n]中的任意数据num[i][j] 指针p=p+n*i+j;   */
	puts("输出数组中第三个数据\n");
	printf("e[0][2]=%d\n",*(p_e+3*0+2));
	puts("输出数组中第五个数据\n");
	printf("e[1][1]=%d\n",*(p_e+3*1+1));
	//保存指针的数组
	/*原理:1.一个二维数组相当于一个一维数组嵌套了多个一维数组
	       2.定义一个指针数组，保存所有被嵌套的数组中的第一个元素
		   3.用指针遍历一维数组的方法遍历二维数组*/
	int ee[3][4]={
		{1,2,3,4},
		{5,6,7,8},
		{9,0,11,12}
	};
	int* p_ee[3];
	int j,k,k1;
	for(j=0;j<3;j++)
		p_ee[j]=ee[j];//把第一列元素复制给数组指针
	puts("输出第一个元素\n");
	for(j=0;j<3;j++)
		printf("%2d",*p_ee[j]);
	printf("遍历数组后输出结果\n");
	for(k=0;k<3;k++)
	{
		for(k1=0;k1<4;k1++)
			printf("%3d",*(p_ee[k]+k1));
		printf("\n");
	}
	puts("用读取任意数组元素的方法遍历数组\n");
	int i;
	int *p_e2=&ee[0][0];
	for(i=0;i<3;i++)
	{
		for(j=0;j<4;j++)
			printf("%3d",*(p_e2+4*i+j));
		printf("\n");
	}
	printf("\n");
	//指针在函数中的应用
//1.指针作为函数参数
	int f=6;
	one(&f);
	printf("指针作为函数参数\n");
	printf("f=%d\n",f);
	system("pause");
	return 0;
}
void one(int *p_one)
{
		*p_one=*p_one+5;
}